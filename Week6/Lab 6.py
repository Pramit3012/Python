# -*- coding: utf-8 -*-
"""irisdataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bb5cKB7BcFIKqsDCMior-UsOJPPE-FOz
"""

# Install necessary libraries
!pip install numpy scipy pandas matplotlib scikit-learn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.linear_model import LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from pandas.plotting import scatter_matrix

# Load dataset
iris = load_iris()
data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
data['species'] = iris.target

# Summarize dataset
print("Dataset dimensions:", data.shape)
print("\nPeek at data:\n", data.head())
print("\nStatistical summary:\n", data.describe())
print("\nClass distribution:\n", data['species'].value_counts())

# Univariate plots
# Filter out the non-numeric column 'species' for box plots
numeric_data = data.drop(columns=['species'])

# Box plot
numeric_data.plot(kind='box', subplots=True, sharex=False, sharey=False)
plt.show()

# Histogram
numeric_data.hist(figsize=(10, 8))
plt.show()

# Multivariate plots
scatter_matrix(data, figsize=(10, 10), diagonal='kde')
plt.show()

# Prepare for model evaluation
X = data.iloc[:, :-1]
y = data['species']
X_train, X_validation, y_train, y_validation = train_test_split(X, y, test_size=0.2, random_state=1)
kfold = KFold(n_splits=10, random_state=1, shuffle=True)

# Evaluate algorithms
models = []
models.append(('LR', LogisticRegression(max_iter=200)))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC()))

results = []
names = []
for name, model in models:
    cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print(f'{name}: {cv_results.mean():.4f} ({cv_results.std():.4f})')

# Train and make predictions with the best model
best_model = SVC()  # Replace with the best model from above
best_model.fit(X_train, y_train)
predictions = best_model.predict(X_validation)

print("Accuracy:", accuracy_score(y_validation, predictions))
print("\nConfusion Matrix:\n", confusion_matrix(y_validation, predictions))
print("\nClassification Report:\n", classification_report(y_validation, predictions))